name: Semantic Versioning

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main

jobs:
  tagging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Debug
        run: echo "Tagging job running!"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to access the full tag history

      - name: Get source branch 
        id: get_source_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.event.workflow_run.id }}
        run: |
          # Get the commit SHA from the workflow run
          COMMIT_SHA=$(gh api repos/$REPO/actions/runs/$RUN_ID --jq '.head_sha')
          echo "Commit SHA: $COMMIT_SHA"
          
          # Find the pull request that was merged with this commit
          PR_DATA=$(gh api "repos/$REPO/pulls?state=closed&sort=updated&direction=desc&per_page=100" | \
            jq -r --arg sha "$COMMIT_SHA" '.[] | select(.merge_commit_sha == $sha) | .head.ref')
          
          if [ -n "$PR_DATA" ]; then
            SOURCE_BRANCH="$PR_DATA"
            echo "Found source branch from merged PR: $SOURCE_BRANCH"
          else
            # Fallback: if no PR found, assume direct push to main
            SOURCE_BRANCH="main"
            echo "No merged PR found, using fallback: $SOURCE_BRANCH"
          fi
          
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          

      - name: Determine version bump
        id: version_bump
        run: |
          SOURCE_BRANCH="${{ steps.get_source_branch.outputs.source_branch }}"
          BUMP="patch" # Default to patch
          if [[ "$SOURCE_BRANCH" == "dev" ]]; then
            BUMP="minor"
          elif [[ "$SOURCE_BRANCH" == "release" ]]; then
            BUMP="major"
          fi
          echo "Version bump: $BUMP"
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Generate and push new tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Get the latest tag. Returns an empty string if none.
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            # If no tags, initial version is v0.1.0
            NEW_TAG="v0.1.0"
          else
            # Parse the latest tag (e.g., v1.2.3)
            LATEST_TAG_CLEAN=${LATEST_TAG#v}
            IFS='.' read -r -a V <<< "$LATEST_TAG_CLEAN"
            MAJOR=${V[0]}
            MINOR=${V[1]}
            PATCH=${V[2]}

            # Increment the version based on the bump type
            BUMP="${{ steps.version_bump.outputs.bump }}"
            if [[ "$BUMP" == "major" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [[ "$BUMP" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else # patch
              PATCH=$((PATCH + 1))
            fi
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "Latest tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
